import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class YelpUserStatistics {

	//CONSTANTS AND DATA MEMBERS
	
	public YelpUserStatistics(Path path) {
		
		this.path = path;
		this.numActive = 0;
		this.numVoters = 0;
		parseUsers();
		
	}
	
	private void parseUsers() {
		//open file
		//for each line
		// parse as json
		// if review count > threshold
		//  increment active
		// if at least one vote recorded
		//  increment voters
		
		JSONParser parser = new JSONParser();
		try(BufferedReader reader = Files.newBufferedReader(this.path, Charset.forName("UTF-8"))) {
			
			String line = reader.readLine();
			while(line != null) {
				JSONObject contents = (JSONObject) parser.parse(line);
				
				long reviewCount = (long) contents.get("review_count");
				
				if(reviewCount > ACTIVE_THRESHOLD) {
					this.numActive++;
				}
				
				JSONObject votes = (JSONObject) contents.get("votes");
				long cool = (long) votes.get("cool");
				long useful = (long) votes.get("useful");
				long funny = (long) votes.get("funny");
				if(cool > 0 || useful > 0 || funny > 0) {
					this.numVoters++;
				} 
				
//				else {
//					System.out.println("No votes for " + contents.get("name"));
//				}
				
				line = reader.readLine();
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		
		
	}
	
	/**
	 * Returns the number of active users.
	 * An active user is one who has contributed 
	 * more than 10 reviews.
	 * 
	 * @return
	 */
	public int getNumberActiveUsers() {		
		return this.numActive;		
	}
	
	/**
	 * Returns the number of users who 
	 * have voted at least once.
	 * 
	 * @return
	 */
	public int getVoters() {
		return this.numVoters;
	}
	
}
